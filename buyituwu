return function(scriptKey)
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local StarterGui = game:GetService("StarterGui")

    repeat wait() until game:IsLoaded()
    wait(2)

    local player = Players.LocalPlayer
    local username = player and player.Name or "Unknown"
    local clientId = game:GetService("RbxAnalyticsService"):GetClientId()
    local webhookURL = "https://discord.com/api/webhooks/1281744707323695156/BsB0-2druVQuGaqfLBCsW6Jd76ooMEh0d-vhehEyP0UKe4aJpuUF0gThhEDCgIBSMINn"

    setclipboard(clientId)
    local jsonUrl = 'https://raw.githubusercontent.com/randomprojectss/CostlyStylishComputing/refs/heads/main/keys.json'

    local function sendWebhookMessage(content)
        local message = {
            content = content,
            username = "MetaMethod:D",
            avatar_url = "https://www.roblox.com/asset/?id=1234567890"
        }

        local jsonData = HttpService:JSONEncode(message)
        local headers = {
            ["Content-Type"] = "application/json"
        }

        local success, response = pcall(function()
            local httpRequest = http_request or request or syn.request or HttpService.RequestAsync
            return httpRequest({
                Url = webhookURL,
                Method = "POST",
                Headers = headers,
                Body = jsonData
            })
        end)

        if success then
            print("Message sent successfully.")
        else
            warn("Failed to send message:", response)
        end
    end

    local function fetchAndParseJson(url)
        local cacheBuster = tostring(os.time())
        local fullUrl = url .. "?t=" .. cacheBuster

        local success, jsonData = pcall(function()
            return game:HttpGet(fullUrl)
        end)

        if not success then
            warn("Failed to fetch JSON data: " .. jsonData)
            return nil
        end

        local parsedData
        success, parsedData = pcall(function()
            return HttpService:JSONDecode(jsonData)
        end)

        if not success then
            warn("Failed to parse JSON data: " .. parsedData)
            return nil
        end

        return parsedData
    end

    local refreshInterval = 600
    local lastFetchTime = 0
    local validKeys = {}

    local function refreshData()
        local currentTime = os.time()
        if currentTime - lastFetchTime >= refreshInterval then
            validKeys = fetchAndParseJson(jsonUrl)
            lastFetchTime = currentTime
        end
    end

    refreshData()

    local function isValidKeyAndHWID(key)
        local keyData = validKeys[key]
        if keyData then
            if keyData.status == "redeemed" then
                local requiredHwid = keyData.hwid
                if requiredHwid == nil or requiredHwid == clientId then
                    return true
                end
            end
        end
        return false
    end

    local function showNotification(title, text)
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = 5
        })
    end

    refreshData()
    local whitelisted = isValidKeyAndHWID(scriptKey)

    if whitelisted then
        showNotification("Success", "You are whitelisted!")

        local scriptUrl = 'https://raw.githubusercontent.com/randomprojectss/random/refs/heads/main/urscript'
        local scriptContent = game:HttpGet(scriptUrl)

        local scriptFunction, errorMessage = loadstring(scriptContent)

        if scriptFunction then
            scriptFunction()
        else
            warn("Failed to load external script: " .. errorMessage)
        end

        sendWebhookMessage("User: " .. username .. "\nClient ID: " .. clientId .. "\nScript Key: " .. scriptKey .. "\nStatus: Whitelisted")
    else
        showNotification("Access Denied", "You are not whitelisted or HWID does not match.")

        sendWebhookMessage("User: " .. username .. "\nClient ID: " .. clientId .. "\nScript Key: " .. scriptKey .. "\nStatus: Not Whitelisted")
    end
end
